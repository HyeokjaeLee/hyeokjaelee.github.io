{"version":3,"file":"component---src-pages-index-tsx-4dcd1957e43bca27e566.js","mappings":"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","sources":["webpack://hyeokjaelee.github.io/./src/components/organisms/PostList.tsx","webpack://hyeokjaelee.github.io/./src/components/organisms/TagList.tsx","webpack://hyeokjaelee.github.io/./src/pages/index.tsx"],"sourcesContent":["import { PostLargeCard } from '@components/molecules/PostLargeCard';\nimport { SELECTOR } from '@constants/layout';\nimport { useGlobalStore } from '@stores/useGlobalStore';\nimport { useLayoutEffect, useRef, useState } from 'react';\nimport { VirtuosoGrid } from 'react-virtuoso';\nimport type { PostPageQuery } from 'types/graphql-types';\nimport { useShallow } from 'zustand/shallow';\n\ninterface PostListProps {\n  postList: PostPageQuery['allMarkdownRemark']['nodes'];\n  className?: string;\n}\n\nexport const PostList = ({ postList, className = '' }: PostListProps) => {\n  const [likePostMap, setLikePostMap] = useGlobalStore(\n    useShallow((state) => [state.likePostMap, state.setLikePostMap]),\n  );\n\n  // 기본 높이 값 설정 (기본값으로 화면 높이의 70% 정도로 설정)\n  const [gridHeight, setGridHeight] = useState(600);\n  const rootRef = useRef<HTMLElement | null>(null);\n\n  // 외부 스크롤러(root 요소) 참조 가져오기 및 높이 계산\n  useLayoutEffect(() => {\n    // ROOT 요소 참조 가져오기\n    const rootElement = document.getElementById(SELECTOR.ROOT);\n    if (rootElement) {\n      rootRef.current = rootElement;\n    }\n\n    // 높이 계산 함수\n    const calculateHeight = () => {\n      // 컨텐츠 영역 높이 계산 (헤더 및 네비게이션 영역 제외)\n      const calculatedHeight = window.innerHeight - 200;\n      setGridHeight(Math.max(calculatedHeight, 400)); // 최소 400px 보장\n    };\n\n    // 초기 계산 및 이벤트 리스너 등록\n    calculateHeight();\n    window.addEventListener('resize', calculateHeight);\n\n    return () => {\n      window.removeEventListener('resize', calculateHeight);\n    };\n  }, []);\n\n  // 문제 해결: 만약 postList가 비어있으면 일부 더미 데이터 표시\n  if (postList.length === 0) {\n    return (\n      <div\n        className={`mx-auto min-h-0 w-full max-w-6xl flex-1 px-4 ${className} flex items-center justify-center`}\n      >\n        <p className=\"text-lg text-zinc-500\">포스트가 없습니다.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`mx-auto w-full max-w-6xl flex-1 ${className}`}\n      style={{ minHeight: gridHeight }}\n    >\n      <VirtuosoGrid\n        customScrollParent={rootRef.current || undefined}\n        totalCount={postList.length}\n        overscan={20}\n        listClassName=\"grid grid-cols-1 gap-4 p-4 sm:grid-cols-2 md:grid-cols-3\"\n        style={{ height: gridHeight }}\n        itemContent={(index) => {\n          const post = postList[index];\n          if (!post) return null;\n\n          const { fields, frontmatter } = post;\n          const { slug } = fields ?? {};\n\n          if (!slug) return null;\n\n          return (\n            <PostLargeCard\n              key={slug}\n              date={frontmatter?.date}\n              description={frontmatter?.description}\n              href={slug}\n              isLiked={likePostMap.get(slug)}\n              tags={frontmatter?.tags ?? []}\n              className=\"h-fit w-full\"\n              title={frontmatter?.title || '무제'}\n              onClickLikeButton={() => {\n                setLikePostMap((prevMap) => {\n                  prevMap.set(slug, !prevMap.get(slug));\n\n                  return prevMap;\n                });\n              }}\n            />\n          );\n        }}\n      />\n    </div>\n  );\n};\n","import { Button } from '@components/atoms/Button';\nimport { Link } from 'gatsby';\nimport { useEffect, useRef } from 'react';\nimport type SwiperType from 'swiper';\nimport { Autoplay, Mousewheel } from 'swiper/modules';\nimport { Swiper, SwiperSlide } from 'swiper/react';\n\nconst POST_TAGS = [\n  'all',\n  'issues',\n  'frontend',\n  'backend',\n  'devOps',\n  'etc',\n  'project',\n  'data',\n];\n\ninterface TagListProps {\n  currentTag: string;\n}\n\nexport const TagList = ({ currentTag }: TagListProps) => {\n  const slideRef = useRef<SwiperType | null>(null);\n\n  useEffect(() => {\n    const swiperIndex = POST_TAGS.findIndex((value) => value === currentTag);\n    if (slideRef.current) {\n      slideRef.current.slideTo(swiperIndex);\n    }\n  }, [currentTag]);\n\n  return (\n    <nav className=\"mx-auto flex w-full justify-center py-4\">\n      <Swiper\n        mousewheel\n        autoplay={{\n          delay: 3_000,\n          disableOnInteraction: true,\n        }}\n        className=\"mx-auto w-auto px-4\"\n        modules={[Mousewheel, Autoplay]}\n        slidesPerView=\"auto\"\n        spaceBetween={4}\n        onSwiper={(swiper) => (slideRef.current = swiper)}\n      >\n        {POST_TAGS.map((value) => {\n          const isCurrentTag = value === currentTag;\n\n          return (\n            <SwiperSlide key={value} className=\"my-2 w-auto\">\n              <Button\n                asChild\n                size=\"8\"\n                variant={isCurrentTag ? 'primary' : 'ghost'}\n              >\n                <Link to={`?tag=${value}`}>{value}</Link>\n              </Button>\n            </SwiperSlide>\n          );\n        })}\n      </Swiper>\n    </nav>\n  );\n};\n","import { Bio } from '@components/molecules/Bio';\nimport { Meta } from '@components/molecules/Meta';\nimport { PostList } from '@components/organisms/PostList';\nimport { TagList } from '@components/organisms/TagList';\nimport type { PageProps } from 'gatsby';\nimport { graphql } from 'gatsby';\nimport type { PostPageQuery } from 'types/graphql-types';\n\nconst PostPage = ({\n  location,\n  data: {\n    allMarkdownRemark: { nodes },\n  },\n}: PageProps<PostPageQuery>) => {\n  const searchParams = new URLSearchParams(location.search);\n  const tag = searchParams.get('tag') || 'all';\n\n  const postList = nodes.filter(\n    ({ frontmatter }) => tag === 'all' || frontmatter?.tags?.includes(tag),\n  );\n\n  return (\n    <article className=\"flex size-full flex-col items-center justify-start\">\n      <header className=\"py-7\">\n        <Bio />\n      </header>\n      <TagList currentTag={tag} />\n      <PostList postList={postList} />\n    </article>\n  );\n};\n\nexport default PostPage;\n\nexport const Head = () => <Meta />;\n\nexport const postPageQuery = graphql`\n  query PostPage {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YY년 MM월 DD일\")\n          title\n          titleImage\n          tags\n          description\n        }\n      }\n    }\n  }\n`;\n"],"names":["PostList","_ref","postList","className","likePostMap","setLikePostMap","useGlobalStore","useShallow","state","gridHeight","setGridHeight","useState","rootRef","useRef","useLayoutEffect","rootElement","document","getElementById","SELECTOR","ROOT","current","calculateHeight","calculatedHeight","window","innerHeight","Math","max","addEventListener","removeEventListener","length","_jsx","children","style","minHeight","VirtuosoGrid","customScrollParent","undefined","totalCount","overscan","listClassName","height","itemContent","index","_frontmatter$tags","post","fields","frontmatter","slug","PostLargeCard","date","description","href","isLiked","get","tags","title","onClickLikeButton","prevMap","set","POST_TAGS","TagList","currentTag","slideRef","useEffect","swiperIndex","findIndex","value","slideTo","Swiper","mousewheel","autoplay","delay","disableOnInteraction","modules","Mousewheel","Autoplay","slidesPerView","spaceBetween","onSwiper","swiper","map","isCurrentTag","SwiperSlide","Button","asChild","size","variant","Link","to","location","data","allMarkdownRemark","nodes","tag","URLSearchParams","search","filter","_ref2","includes","_jsxs","Bio","Head","Meta"],"sourceRoot":""}