{"componentChunkName":"component---src-layouts-post-layout-index-tsx","path":"/components-styling/","result":{"data":{"markdownRemark":{"id":"18780f42-9b16-59d9-acfa-1e41c2fde40e","html":"<p class=\"my-4 whitespace-pre-wrap\">이번에 사내 제품 코드의 스타일링 방식이 혼재되어있는 상황에서 한가지로 통일하려 하면서 찾아본 여러가지 스타일링 방식에 대한 생각과 내용을 정리해봤다.</p>\n<h2 id=\"발단\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%EB%B0%9C%EB%8B%A8\" aria-label=\"발단 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>발단</h2>\n<p class=\"my-4 whitespace-pre-wrap\">제품에 대한 온보딩을 진행하면서 기존에 작성된 코드들을 살펴보게 되었고 당장 큰 범위의 기능 개발이 없었기 때문에 시간적 여유가 있다고 생각해 제품 코드에 대한 이해도를 높일겸 리팩토링을 진행하려 했다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">내가 가장 처음 느꼈던 부분은 정해진 방식 없이 기존 코드가 여러 개발자 분들의 손을 거치다보니 여러 라이브러리와 스타일링 방식이 혼재되어있다는 부분이었다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">우선 <a href=\"https://chakra-ui.com/\" class=\"text-blue-500 hover:underline\">Chakra-ui</a>를 기반으로 주로 CSS-in-JS 방식의 emotion과 styled-components가 혼재되어있었고 중간중간 불필요한 inline-style 코드들이 보였다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">CSS-in-JS 방식 자체는 요즘 트렌드이기도 하고 제품이 성능 자체가 중요한것은 아니라고 판단되었기 때문에 그리 큰 문제는 아니었지만 이런식의 스타일링 컨벤션이 없는 상태로 제품 개발이 계속 진행되다 보면 결국 기술부채가 쌓이고 언젠가 이를 상환하기 위해 더 큰 리소스를 투입해야 된다고 생각했기 때문에 아직 제품 코드가 쌓이기 전에 이를 정리하고 가고싶다는 생각이었다.</p>\n<h2 id=\"컴포넌트-스타일링-스택-후보\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-%EC%8A%A4%ED%83%9D-%ED%9B%84%EB%B3%B4\" aria-label=\"컴포넌트 스타일링 스택 후보 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트 스타일링 스택 후보</h2>\n<p class=\"my-4 whitespace-pre-wrap\">다음은 내가 고민했던 기술 스택들에 대한 장단점과 나의 의견을 정리해본것이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">우선 다음과 같은 이유에서 inline-style로 작성된 코드들은 적용범위가 적고 우선순위가 높아 편리하지만 렌더링 할때마다 객체 주소가 바뀌고 이를 리액트는 가상 DOM 변화라고 인식하기 때문에 불필요한 리렌더를 발생시켜 제외하고 꼭 필요한 경우가 아니라면 최대한 걷어내기로 했다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">물론 css 객체를 메모제이션 하면 이부분은 일정 부분 해소 가능하지만 굳이 CSS-in-JS 방식에 좋은 대안들이 많은데 이방법을 사용하는건 비효율 적이라는 생각이다.</p>\n<h3 id=\"css-in-js\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#css-in-js\" aria-label=\"css in js permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS-in-JS</h3>\n<h4 id=\"장점\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h4>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">필요한 컴포넌트 페이지의 스타일 요소만 로딩함</li>\n<li class=\"list-item list-container\">파일 관리가 편함 / 컴포넌트간 완전한 분리가 보장 / 모듈성</li>\n<li class=\"list-item list-container\">스타일링 우선순위에 대한 고민이 비교적 적음</li>\n<li class=\"list-item list-container\">JS 환경을 최대한 활용함</li>\n<li class=\"list-item list-container\"><strong class=\"font-black\">자바스크립트와 CSS 사이의 상수와 함수를 공유함</strong> (이부분이 가장 포기하기 힘든 부분)</li>\n<li class=\"list-item list-container\">요즘 많은 개발자들이 선호하는 방식</li>\n</ul>\n<h4 id=\"단점\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h4>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">\n<p class=\"my-4 whitespace-pre-wrap\">CSS-in-CSS 방식에 비해 성능이 떨어짐</p>\n<p class=\"my-4 whitespace-pre-wrap\"><a href=\"https://pustelto.com/blog/css-vs-css-in-js-perf/\" class=\"text-blue-500 hover:underline\">Tomas Pustelnik / Real-world CSS vs. CSS-in-JS performance comparison</a></p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">요약하자면 앱의 속도 개선을 위해서는 JS 절대량을 줄여라</p>\n</blockquote>\n</li>\n<li class=\"list-item list-container\">\n<p class=\"my-4 whitespace-pre-wrap\">스크립트 파일의 크기가 커지면 가독성을 해침 (특히 포메터를 사용할 경우)</p>\n</li>\n</ul>\n<h4 id=\"관련-스택\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#%EA%B4%80%EB%A0%A8-%EC%8A%A4%ED%83%9D\" aria-label=\"관련 스택 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관련 스택</h4>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">Emotion</li>\n<li class=\"list-item list-container\">Styled-Components</li>\n</ul>\n<p class=\"my-4 whitespace-pre-wrap\">만약 위 두 기술스택중 선택한다면 Emotion을 선택할것 같다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">잘 정리된 포스트가 있는데 가서 읽어 보는것도 좋을것 같다.\n<a href=\"https://velog.io/@bepyan/styled-components-%EA%B3%BC-emotion-%EB%8F%84%EB%8C%80%EC%B2%B4-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EB%AD%94%EA%B0%80\" class=\"text-blue-500 hover:underline\">bepyan.log / styled-components 과 emotion, 도대체 차이가 뭔가?</a></p>\n<h3 id=\"css-in-css\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#css-in-css\" aria-label=\"css in css permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS-in-CSS</h3>\n<h4 id=\"장점-1\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#%EC%9E%A5%EC%A0%90-1\" aria-label=\"장점 1 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h4>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">가장 일반적이고 기초적인 스타일링 방법이기 때문에 Front-end 추후 합류할 다른 개발자들도 별도의 학습이 필요없다.\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">물론 CSS에서 제공하는 모든 기능을 잘 쓰냐는 다른 문제</p>\n</blockquote>\n</li>\n<li class=\"list-item list-container\">CSS-in-JS 방식보다 일반적인 상황에서 빠름</li>\n<li class=\"list-item list-container\">추가적인 의존성 없이 사용 가능</li>\n<li class=\"list-item list-container\">CSS-in-JS 방식보다 재사용성이 조금더 낫다는 생각</li>\n<li class=\"list-item list-container\">Stylesheet 파일 분리로 인해 준수한 가독성</li>\n</ul>\n<h4 id=\"단점-1\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#%EB%8B%A8%EC%A0%90-1\" aria-label=\"단점 1 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h4>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">변동적인 값에 대한 핸들링이 불편함</li>\n<li class=\"list-item list-container\">디테일한 컨벤션 없이는 규모가 커질수록 협업이 힘들 수 있음\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">클래스 속성 중복등</p>\n</blockquote>\n</li>\n<li class=\"list-item list-container\">파일 구조에 대한 고민이 필요함</li>\n<li class=\"list-item list-container\">우선순위에 대한 많은 고민이 필요함</li>\n</ul>\n<h4 id=\"관련-스택-1\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#%EA%B4%80%EB%A0%A8-%EC%8A%A4%ED%83%9D-1\" aria-label=\"관련 스택 1 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관련 스택</h4>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">CSS-Modules</li>\n<li class=\"list-item list-container\">CSS</li>\n<li class=\"list-item list-container\">SASS(SCSS)</li>\n</ul>\n<h2 id=\"최종-선택\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%EC%B5%9C%EC%A2%85-%EC%84%A0%ED%83%9D\" aria-label=\"최종 선택 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최종 선택</h2>\n<p class=\"my-4 whitespace-pre-wrap\"><strong class=\"font-black\">결론적으로 나는 SCSS 형식을 사용해 CSS-Modules 방식으로 리팩토링을 진행하기로 했다.</strong></p>\n<p class=\"my-4 whitespace-pre-wrap\">여러가지 이유가 있겠지만 내가 가장 끌렸던 부분은 성능적인 부분이다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">참고로 나는 JS 내장함수들도 브라우저별 성능을 비교해보고 쓸정도로 최적화에 관심이 많다.</p>\n</blockquote>\n<p class=\"my-4 whitespace-pre-wrap\">사실 개발하고 있는 제품들이 그렇게 성능이 중요한 제품도 아니라 큰 문제는 없지만 나중에는 어떤기능을 지원하게 될지 모르는 상황에서 이런 성능적 이점을 챙기지 않을 이유가 없었다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">기존 코드가 대부분 CSS-in-JS 방식으로 작성되었기 때문에 할일이 더 많아지긴 했지만 그리고 내 기준으로 CSS-in-CSS 방식이 가독성이 좀더 좋다고 느꼈다.</p>\n<h3 id=\"scss를-사용한-이유\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#scss%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"scss를 사용한 이유 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SCSS를 사용한 이유</h3>\n<p class=\"my-4 whitespace-pre-wrap\">기본 CSS 대신 SCSS를 사용한 이유는 여러기지 편의성 함수들과 스타일시트간 import의 성능 차이 때문이다</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">기본적으로 CSS의 @import는 병렬적으로 처리되지 않는다.</p>\n</blockquote>\n<p class=\"my-4 whitespace-pre-wrap\">관련된 내용들은 <a href=\"https://yceffort.kr/2021/03/improve-css-performance\" class=\"text-blue-500 hover:underline\">해당 포스트</a>에 잘 정리되어있다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">최근에 SASS에서 지원하는 여러 가지 기능들이 CSS에서도 지원되기 시작했지만 아직 실험적인 기능들이 많고 브라우저별 호환성도 천차만별이라 SASS를 선택했다.</p>\n<h3 id=\"css-modules을-사용한-이유\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#css-modules%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"css modules을 사용한 이유 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS-Modules을 사용한 이유</h3>\n<p class=\"my-4 whitespace-pre-wrap\">CSS-Modules을 사용한 이유는 CSS-in-JS처럼 컴포넌트 간 분리를 원했으며 클래스명 작명 컨벤션을 만드는 것보다 컴포넌트 단위로 스타일시트가 종속되는 게 구조 파악에 용이하고 생각했기 때문이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">조금 덧붙이자면 Next.js는 <a href=\"https://nextjs.org/blog/next-9-3#built-in-sass-css-module-support-for-component-level-styles\" class=\"text-blue-500 hover:underline\">9.3 ver</a> 이후 CSS-Modules 방식을 권장했다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">B2C 페이지에 Next.js 도입을 고려하는 상황에서 CSS-Modules을 사용하는 방향으로 컨벤션을 확립한다면 추후 발생 가능한 혼란을 최소화할 수 있다고 생각했다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">내 개인적인 선호가 영향을 주지 않았다면 거짓말이겠지만 적어도 레퍼런스와 고민 없이 선택한 것이 아니라고 말하고 싶다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">추가적으로 이러한 방법을 적용하고 이후 개발 패턴을 적용했을 때 효율적인 파일 구조가 어떤 것 일지 고민해봐야 할 것 같다.</p>","headings":[{"depth":2,"value":"발단","id":"발단"},{"depth":2,"value":"컴포넌트 스타일링 스택 후보","id":"컴포넌트-스타일링-스택-후보"},{"depth":3,"value":"CSS-in-JS","id":"css-in-js"},{"depth":4,"value":"장점","id":"장점"},{"depth":4,"value":"단점","id":"단점"},{"depth":4,"value":"관련 스택","id":"관련-스택"},{"depth":3,"value":"CSS-in-CSS","id":"css-in-css"},{"depth":4,"value":"장점","id":"장점-1"},{"depth":4,"value":"단점","id":"단점-1"},{"depth":4,"value":"관련 스택","id":"관련-스택-1"},{"depth":2,"value":"최종 선택","id":"최종-선택"},{"depth":3,"value":"SCSS를 사용한 이유","id":"scss를-사용한-이유"},{"depth":3,"value":"CSS-Modules을 사용한 이유","id":"css-modules을-사용한-이유"}],"fields":{"slug":"/components-styling/"},"frontmatter":{"title":"리액트 컴포넌트 스타일링 정리","date":"22년 03월 12일","description":"리액트 기반 제품을 개발하면서 고민했던 컴포넌트 스타일링 방법에 대한 고민","tags":["frontend"]}},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/briend/"},"frontmatter":{"date":"23년 10월 06일","title":"Briend 번역 채팅앱 개발","titleImage":"../images/contents/briend/briend.jpg","tags":["project","frontend","backend"],"description":"유지비 0원에 도전, 짠내나는 번역 채팅앱 개발기"}},{"fields":{"slug":"/digital-nomad-in-jeju/"},"frontmatter":{"date":"23년 04월 10일","title":"제주도 디지털 노마드 생활기","titleImage":"../images/contents/digital-nomad-in-jeju/jeju-cafe.jpeg","tags":["etc"],"description":"3주간 제주도에서 디지털 노마드로 살아보기"}},{"fields":{"slug":"/install-private-packages-with-yarn-berry/"},"frontmatter":{"date":"23년 01월 20일","title":"Install private packages with yarn berry","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/b40ef5d8-6697-41ff-83e6-3e79aef7617a","tags":["issues"],"description":"Spawn node-gyp ENOENT 에러 해결"}},{"fields":{"slug":"/digital-nomad-in-chiang-mai/"},"frontmatter":{"date":"23년 01월 14일","title":"치앙마이 디지털 노마드 생활기","titleImage":"../images/contents/digital-nomad-in-chiang-mai/yellow.jpg","tags":["etc"],"description":"한 달 반동안 치앙마이에서 디지털 노마드로 살아보기"}},{"fields":{"slug":"/react-component-concept/"},"frontmatter":{"date":"22년 11월 16일","title":"리액트 컴포넌트, 어떤 컨셉으로 개발할까?","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/fe6c2b69-9e2e-4724-8204-858b30eef7a3","tags":["frontend"],"description":"리렌더링을 최소화한 React 기반 컴포넌트 라이브러리를 개발하면서 고민했던 내용"}},{"fields":{"slug":"/react-atomic/"},"frontmatter":{"date":"22년 10월 30일","title":"Atomic Design Pattern 적용기","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/846dea6f-cb4f-45db-8f38-634e5e5703b3","tags":["frontend"],"description":"React 제품 개발, Atomic Design Pattern 녹여내기"}},{"fields":{"slug":"/react-design-pattern/"},"frontmatter":{"date":"22년 10월 29일","title":"React 기반 제품을 개발할 때 고려해 볼 만한 디자인 패턴","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/93a45880-52dd-4aff-ad4e-9f1e47f5fe4b","tags":["frontend"],"description":"React 제품 개발, 유용한 몇 가지 디자인 패턴"}},{"fields":{"slug":"/spawn-node-gyp-enoent/"},"frontmatter":{"date":"22년 09월 17일","title":"Spawn node-gyp ENOENT","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/b40ef5d8-6697-41ff-83e6-3e79aef7617a","tags":["issues"],"description":"Spawn node-gyp ENOENT 에러 해결"}},{"fields":{"slug":"/components-styling/"},"frontmatter":{"date":"22년 03월 12일","title":"리액트 컴포넌트 스타일링 정리","titleImage":"../images/contents/components-styling/react.png","tags":["frontend"],"description":"리액트 기반 제품을 개발하면서 고민했던 컴포넌트 스타일링 방법에 대한 고민"}},{"fields":{"slug":"/employment-memoirs/"},"frontmatter":{"date":"22년 02월 16일","title":"대학생 개발자 취업 회고 (1)","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/c8375f1e-6bda-4de3-ab2c-55db8719e709","tags":["etc"],"description":"평범한 대학생 개발자가 2022년 상반기 취업하면서 느낀점"}},{"fields":{"slug":"/employment-memoirs2/"},"frontmatter":{"date":"22년 02월 16일","title":"대학생 개발자 취업 회고 (2)","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/c8375f1e-6bda-4de3-ab2c-55db8719e709","tags":["etc"],"description":"평범한 대학생 개발자가 2022년 상반기 취업하면서 느낀점"}},{"fields":{"slug":"/blog-remake-review2/"},"frontmatter":{"date":"21년 12월 01일","title":"Gatsby 블로그를 개발하면서","titleImage":"../images/contents/blog-remake-review2/gatsby.png","tags":["etc","frontend"],"description":"Next.js에서 Gatsby로 블로그를 이전하면서 느낀 점"}},{"fields":{"slug":"/covid-19-api-update/"},"frontmatter":{"date":"21년 11월 30일","title":"COVID-19 API 업데이트","titleImage":"../images/contents/covid-19-api-update/covid-19-api.png","tags":["project","backend"],"description":"단계적 일상회복에 따른 Covid-19 API 업데이트"}},{"fields":{"slug":"/korea-webtoon-api-update/"},"frontmatter":{"date":"21년 11월 17일","title":"Webtoon API 개발","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/99b6a086-1283-4088-81cc-4cb857c3ccdb","tags":["project","backend"],"description":"비공식 한국 웹툰 서비스 통합 API 개발"}},{"fields":{"slug":"/nest-js/"},"frontmatter":{"date":"21년 10월 29일","title":"NestJS 웹서버 구축하기","titleImage":"../images/contents/nest-js/nest.jpg","tags":["backend"],"description":"Typescript를 이용한 NestJS 코드 작성"}},{"fields":{"slug":"/knu-lms-scheduler/"},"frontmatter":{"date":"21년 10월 14일","title":"KNU LMS Scheduler 프로젝트","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/5ce48afd-9e2c-47c0-82ed-f9deac8556f6","tags":["project","data","frontend"],"description":"공주대학교 비대면 강의 시스템 편의성 개선 프로젝트"}},{"fields":{"slug":"/gititle-project/"},"frontmatter":{"date":"21년 09월 14일","title":"Gititle 프로젝트","titleImage":"https://user-images.githubusercontent.com/71566740/135963287-e5c18f62-da16-4dda-98cb-1dd4a7c2b720.png","tags":["project","frontend"],"description":"좋은 커밋 메시지를 작성하기 위한 프로젝트"}},{"fields":{"slug":"/sass-compiler/"},"frontmatter":{"date":"21년 09월 01일","title":"Live Sass Compiler 사용하기","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/f3841a12-33f5-4994-b147-b38b5a3f5e23","tags":["frontend"],"description":"편리한 Sass 사용을 위한 visual studio code 익스텐션"}},{"fields":{"slug":"/nodejs-crawling/"},"frontmatter":{"date":"21년 08월 31일","title":"크롤링을 통한 데이터 수집하기","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/c9cd8b87-f909-475c-80fe-4f63fb05ad2a","tags":["data"],"description":"Node.js 크롤링을 통한 데이터 수집"}},{"fields":{"slug":"/copilot-review/"},"frontmatter":{"date":"21년 08월 26일","title":"Copilot 사용 후기","titleImage":"../images/contents/copilot-review/copilot.png","tags":["etc"],"description":"Github의 코딩 AI, Copilot 한 달 사용 리뷰"}},{"fields":{"slug":"/typescript-express-server/"},"frontmatter":{"date":"21년 08월 12일","title":"Typescript + Express 서버 구축하기","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/85477ff3-413d-4615-9976-ed0c0cbd9fdc","tags":["backend"],"description":"Typescript를 이용한 Express 서버 구축"}},{"fields":{"slug":"/blog-remake-review1/"},"frontmatter":{"date":"21년 08월 02일","title":"Next.js 블로그를 떠나는 이유","titleImage":"../images/contents/blog-remake-review1/nextjs.png","tags":["etc","frontend"],"description":"블로그 이전 준비"}},{"fields":{"slug":"/good-commit-message/"},"frontmatter":{"date":"21년 07월 03일","title":"Git Commit Message Convention","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/0c061905-eb53-4a8c-a277-6519e1ce2a49","tags":["devOps"],"description":"Git Commit Message 작성을 위한 나와의 약속"}}]},"previous":{"fields":{"slug":"/employment-memoirs2/"},"frontmatter":{"title":"대학생 개발자 취업 회고 (2)","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/c8375f1e-6bda-4de3-ab2c-55db8719e709"}},"next":{"fields":{"slug":"/spawn-node-gyp-enoent/"},"frontmatter":{"title":"Spawn node-gyp ENOENT","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/b40ef5d8-6697-41ff-83e6-3e79aef7617a"}}},"pageContext":{"id":"18780f42-9b16-59d9-acfa-1e41c2fde40e","previousPostId":"5354e550-e262-5baf-8c14-a0949b72d313","nextPostId":"2c508fba-dc5f-5ec1-b8cf-dba145d8bd5d"}},"staticQueryHashes":["2039569036","2964855266","3768041815","3959992161","4278130389"],"slicesMap":{}}