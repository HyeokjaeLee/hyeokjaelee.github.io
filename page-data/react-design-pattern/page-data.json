{"componentChunkName":"component---src-layouts-post-layout-index-tsx","path":"/react-design-pattern/","result":{"data":{"markdownRemark":{"id":"3fb3ac89-bbfc-5db1-af85-ce4fa66aeb56","html":"<p class=\"my-4 whitespace-pre-wrap\">Frontend 제품 개발 초창기에 디자인 패턴 적용과 관련해서 사내 엔지니어링 데이에 발표하려고 정리해놓은 내용들에 대해 작성한 글이다.</p>\n<h2 id=\"디자인-패턴이-뭔데\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%B4-%EB%AD%94%EB%8D%B0\" aria-label=\"디자인 패턴이 뭔데 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디자인 패턴이 뭔데?</h2>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">디자인 패턴(Design pattern)은 건축학 및 컴퓨터 과학에서 사용되는 용어로, 설계 문제에 대한 해답을 문서화하기 위해 고안된 형식 방법이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">이 방식은 건축가 크리스토퍼 알렉산더가 건축학 영역에서 고안한 것을 그 시초로 하며, 이후 컴퓨터 과학 등 여러 다른 분야에도 도입되었다.</p>\n</blockquote>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">많은 개발자들이 그동안 소프트웨어를 개발하면서 축적한 개발 노하우에 이름을 붙이고 재사용하기 좋은 형태로 특정 규약을 만들어 정리한 것</li>\n<li class=\"list-item list-container\">소프트웨어를 설계하면서 경험하는 공통적인 문제들에 대한 표준적인 설루션과 작명법을 제안</li>\n<li class=\"list-item list-container\">프로그램 코드에 바로 적용할 수 있는 형태는 아니지만 구조적인 문제를 해결하는 방법</li>\n</ul>\n<p class=\"my-4 whitespace-pre-wrap\">한마디로 요약하자면 <strong class=\"font-black\">선배 개발자들의 족보</strong>로 이해했다.</p>\n<h2 id=\"react를-이용한-개발에서-유용한-몇-가지-디자인-패턴\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#react%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B0%9C%EB%B0%9C%EC%97%90%EC%84%9C-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%AA%87-%EA%B0%80%EC%A7%80-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4\" aria-label=\"react를 이용한 개발에서 유용한 몇 가지 디자인 패턴 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React를 이용한 개발에서 유용한 몇 가지 디자인 패턴</h2>\n<h3 id=\"mvc\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#mvc\" aria-label=\"mvc permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC</h3>\n<p class=\"my-4 whitespace-pre-wrap\">Frontend 개발자라면 패턴에 대해 고민하거나 의식하고 사용하지 않아도 친숙한 패턴일 것이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">의식하지 않고 개발한 웹도 Model은 특정 DB 혹은 서버에서 책임을 가지고 있을 테고 앱 제어를 위한 Controller는 HTML/JS, View는 HTML/CSS로 분리해서 작성했을 것이기 때문이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">MVC 패턴은 이러한 구분을 더 엄격하게 따르도록 한다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">또한 가장 기본적인 패턴이기도 해서 다른 패턴의 베이스가 되는 경우가 많다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\"><figure class=\"w-full my-6\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/852b8e8d-4c28-4455-b80a-7ccaf9a4ee18\"><figcaption class=\"text-center text-sm text-zinc-400 dark:text-zinc-500 mt-1 not-italic\">mvc</figcaption></figure>\n소프트웨어를 Model - View - Controller 요소로 구분함</p>\n</blockquote>\n<p class=\"my-4 whitespace-pre-wrap\"><strong class=\"font-black\">역할</strong></p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">Model: 데이터 관리</li>\n<li class=\"list-item list-container\">View: 인터페이스</li>\n<li class=\"list-item list-container\">Controller: Model과 View를 연결, 이벤트 처리</li>\n</ul>\n<h3 id=\"mvvm\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#mvvm\" aria-label=\"mvvm permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVVM</h3>\n<p class=\"my-4 whitespace-pre-wrap\">View, ViewModel, Model이 각각 독립적이기 때문에 병력적으로 작업할 수 있고 ViewModel이 View와 Model의 어댑터로써 변경 사항을 쉽게 반영할 수 있다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\"><figure class=\"w-full my-6\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/3ed6ea82-eae0-4595-9292-db24fbefc7ec\"><figcaption class=\"text-center text-sm text-zinc-400 dark:text-zinc-500 mt-1 not-italic\">mvvm</figcaption></figure>\nMVC 패턴에서 Controller를 제외하고 VIewModel을 추가됨</p>\n</blockquote>\n<p class=\"my-4 whitespace-pre-wrap\"><strong class=\"font-black\">역할</strong></p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">Model: 데이터 관리</li>\n<li class=\"list-item list-container\">View: 인터페이스</li>\n<li class=\"list-item list-container\">ViewModel: View를 표현하기 위한 데이터 핸들링</li>\n</ul>\n<h3 id=\"flux\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#flux\" aria-label=\"flux permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flux</h3>\n<p class=\"my-4 whitespace-pre-wrap\">기존 MVC 패턴으로 개발한 앱의 덩치가 커지면서 Model과 View가 늘어남에 따라 데이터 흐름의 복잡도가 늘어났을 때 개발자가 예상하지 못하는 버그를 방지하기 위해 2014년에 Facebook에서 고안한 패턴이다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\"><figure class=\"w-full my-6\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/dd2ed5bc-5395-4b8a-a59b-1bd95dc40a7f\"><figcaption class=\"text-center text-sm text-zinc-400 dark:text-zinc-500 mt-1 not-italic\">flux</figcaption></figure>\nMVC 패턴의 양방향 데이터 바인딩을 단방향으로 대체함</p>\n</blockquote>\n<p class=\"my-4 whitespace-pre-wrap\"><strong class=\"font-black\">역할</strong></p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">Action: 이벤트 발생 시 이벤트 정보를 Dispatcher로 전달</li>\n<li class=\"list-item list-container\">Dispatcher: Action을 파악 후 미리 작성해 둔 명령들을 수행</li>\n<li class=\"list-item list-container\">Store: 데이터 핸들링</li>\n<li class=\"list-item list-container\">View: 인터페이스, 기존 View의 성격을 가지고 있는 동시에 Controller-View로써 최상위 View에서 Store의 데이터를 가져와 인터페이스에 내려주는 역할을 하기도 함</li>\n</ul>\n<h3 id=\"presentational-and-container-component\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#presentational-and-container-component\" aria-label=\"presentational and container component permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Presentational and Container Component</h3>\n<p class=\"my-4 whitespace-pre-wrap\">과거 Hook 개념이 없던 환경에서 리액트의 로직과 View를 분리하기 위한 패턴이다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">이미 Hook이라는 개념이 있는 현재, 로직과 인터페이스를 위한 코드를 분리하기 위한 구조를 위해 참고했다.</p>\n</blockquote>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\"><figure class=\"w-full my-6\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/6901ba00-9c57-462e-a74d-b396de46f605\"><figcaption class=\"text-center text-sm text-zinc-400 dark:text-zinc-500 mt-1 not-italic\">pcc</figcaption></figure>\n앱을 Container Component와 Presentational Component로 나누어 개발한다.</p>\n</blockquote>\n<p class=\"my-4 whitespace-pre-wrap\"><strong class=\"font-black\">역할</strong></p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">Container Component: 로직</li>\n<li class=\"list-item list-container\">Presentational Component: 인터페이스</li>\n</ul>\n<h3 id=\"atomic\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#atomic\" aria-label=\"atomic permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Atomic</h3>\n<p class=\"my-4 whitespace-pre-wrap\">앱의 가장 작은 컴포넌트 단위를 Atom으로 설정하고, Atom을 기반으로 상위 컴포넌트를 만들어 재사용을 최대화하는 패턴이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">개발에만 적용되는 개념이 아니기 때문에 해당 패턴을 적용하기 위해서는 <strong class=\"font-black\">디자이너와의 충분한 소통</strong>이 중요하다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">대충 설명을 봐도 위에서 언급한 다른 패턴과는 살짝 성격이 다르다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">위에서 언급한 패턴들은 대부분 로직과 컴포넌트를 어떤 기준으로 분리하고 운용하는지에 대한 패턴이라면 Atomic 디자인 패턴은 그것보단 인터페이스와 재사용성에 중점을 둔 패턴이라는 생각이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">개발을 진행할 때 백엔드 로직에 의존하지 않고 개발이 가능하지만 컴포넌트가 분리되어 있기 때문에 컨테이너 컴포넌트의 사이즈를 경정할 수 없을 경우, 미디어 쿼리를 사용하기 까다롭다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\"><figure class=\"w-full my-6\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/b82b158f-c4b1-4147-83ff-0f79b50645cb\"><figcaption class=\"text-center text-sm text-zinc-400 dark:text-zinc-500 mt-1 not-italic\">atomic</figcaption></figure>\n여러가지 컴포넌트 단위를 조합해서 앱을 완성한다.</p>\n</blockquote>\n<p class=\"my-4 whitespace-pre-wrap\"><strong class=\"font-black\">역할</strong></p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">Atoms: 디자인과 기능의 최소 단위\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">Label, Text, Container, Button, Icon</p>\n</blockquote>\n</li>\n<li class=\"list-item list-container\">Molecules: Atom을 묶어 관리하는 컴포넌트\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">Input Form, Navigation, Card</p>\n</blockquote>\n</li>\n<li class=\"list-item list-container\">Organisms: Molecules을 묶어 관리하는 컴포넌트\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">CardGird, LabeledInputForm, NavigationSidebar</p>\n</blockquote>\n</li>\n<li class=\"list-item list-container\">Templates: Atoms, Molecules, Organisms을 배치하는데 중점을 둔 컴포넌트</li>\n<li class=\"list-item list-container\">Pages: Templates을 배치하여 웹 애플리케이션 페이지 하나에 대응하는 컴포넌트</li>\n</ul>\n<h2 id=\"디자인-패턴-중요한-건-알겠는데\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EC%A4%91%EC%9A%94%ED%95%9C-%EA%B1%B4-%EC%95%8C%EA%B2%A0%EB%8A%94%EB%8D%B0\" aria-label=\"디자인 패턴 중요한 건 알겠는데 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디자인 패턴, 중요한 건 알겠는데...</h2>\n<p class=\"my-4 whitespace-pre-wrap\"><figure class=\"w-full my-6\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/93a45880-52dd-4aff-ad4e-9f1e47f5fe4b\"><figcaption class=\"text-center text-sm text-zinc-400 dark:text-zinc-500 mt-1 not-italic\">image</figcaption></figure></p>\n<h3 id=\"디자인-패턴-중요한-건-알겠는데-왜-써야-하지\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EC%A4%91%EC%9A%94%ED%95%9C-%EA%B1%B4-%EC%95%8C%EA%B2%A0%EB%8A%94%EB%8D%B0-%EC%99%9C-%EC%8D%A8%EC%95%BC-%ED%95%98%EC%A7%80\" aria-label=\"디자인 패턴 중요한 건 알겠는데 왜 써야 하지 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디자인 패턴 중요한 건 알겠는데 왜 써야 하지?</h3>\n<p class=\"my-4 whitespace-pre-wrap\">실제로 내가 학교에서 '고급 소프트웨어 설계' 과목을 수강하면서 했던 생각이다.</p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">사실 디자인 패턴을 적용해야 한다는 내용의 글과 이론들은 너무 많지만 실제로 경험해 보는 것만큼 크게 실감할 수 있는 방법은 없는 것 같다.</li>\n<li class=\"list-item list-container\">여러 가지 프로젝트를 진행하다 보면 구성원이 늘고 소프트웨어의 덩치가 조금씩 커질 때마다 덩달아 늘어나는 커뮤니케이션 비용과 반비례해서 낮아지는 유지보수 용이성에 대해 고민하게 된다.</li>\n<li class=\"list-item list-container\">특히 1회성으로 끝나는 프로젝트가 아니라 기대 수명을 길게 잡은 소프트웨어를 개발하게 되면 더욱 유지보수 용이성을 신경 쓰지 않을 수 없다.</li>\n<li class=\"list-item list-container\">디자인 패턴은 이런 고민들에 대한 가이드라인이 되어줄 수 있다.</li>\n</ul>\n<h3 id=\"우린-그런-거-없어도-잘-개발해-왔다\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#%EC%9A%B0%EB%A6%B0-%EA%B7%B8%EB%9F%B0-%EA%B1%B0-%EC%97%86%EC%96%B4%EB%8F%84-%EC%9E%98-%EA%B0%9C%EB%B0%9C%ED%95%B4-%EC%99%94%EB%8B%A4\" aria-label=\"우린 그런 거 없어도 잘 개발해 왔다 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우린 그런 거 없어도 잘 개발해 왔다!</h3>\n<p class=\"my-4 whitespace-pre-wrap\">이런 생각이 드는 데는 여러 가지 이유가 있을 수 있겠지만 아래 내용 중 해당사항이 있는지 생각해 볼 필요가 있다.</p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\">이미 이전의 누군가의 고민이 녹아있는 프로젝트에 참여하고 있는 것이 아닌지\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">이 경우라면 제품 관점에서는 큰 문제가 없을 수 있지만 내가 참여하고 있는 프로젝트가 어떤 패턴을 가지고 개발되고 있는지를 안다는 것은 구성원들의 프로젝트 이해도를 높이는데 도움이 된다.</p>\n</blockquote>\n</li>\n<li class=\"list-item list-container\">협업에 대한 고민이 필요 없을 만큼 구성원의 수가 적은 것은 아닌지\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">지금은 그럴지 모르지만 나중에 이미 많은 코드가 쌓인 후 구성원이 늘어나게 된다면 구조개선이 필요한 시점이 온다.</p>\n</blockquote>\n</li>\n<li class=\"list-item list-container\">미리 기반공사가 잘된 프로젝트는 이후 구성원이 늘어났을 때 혼란을 줄일 수 있다.\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">물론 지금의 이런 고민이 정답 일리도 없고 이후에 능력 있는 개발자분들이 합류했을 때 더 좋은 구조를 제시할 수 도 있지만 설계도 없는 건물을 리모델링하는 건 힘들지 않을까..</p>\n</blockquote>\n</li>\n<li class=\"list-item list-container\">소프트웨어 덩치가 이런 고민이 필요 없을 만큼 작은 것은 아닌지\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\">성장하는 회사의 소프트웨어 크기는 결국 커지기 마련이다.\n위 내용과 마찬가지로 미리미리 준비해 놓자.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"모든-상황에서-디자인-패턴을-그대로-따르는-것은-정답이-아닐-수-있다\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#%EB%AA%A8%EB%93%A0-%EC%83%81%ED%99%A9%EC%97%90%EC%84%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%84-%EA%B7%B8%EB%8C%80%EB%A1%9C-%EB%94%B0%EB%A5%B4%EB%8A%94-%EA%B2%83%EC%9D%80-%EC%A0%95%EB%8B%B5%EC%9D%B4-%EC%95%84%EB%8B%90-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"모든 상황에서 디자인 패턴을 그대로 따르는 것은 정답이 아닐 수 있다 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모든 상황에서 디자인 패턴을 그대로 따르는 것은 정답이 아닐 수 있다.</h3>\n<p class=\"my-4 whitespace-pre-wrap\">물론 디자인 패턴이 훌륭한 참고서는 될 수 있다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">개발이 필요한 수천수만 가지 제품에서 이러한 디자인 패턴이 몇십 가지가 된다고 해서 이 모든 제품에 대응할 수 있을 거라 생각하지 않는가 때문에 나는 이것이 답안지라고 생각하지는 않는다.</p>\n<h4 id=\"디자인-패턴을-엄격하게-따르기-위해서-비효율을-감수해야-하는가\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%97%84%EA%B2%A9%ED%95%98%EA%B2%8C-%EB%94%B0%EB%A5%B4%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C-%EB%B9%84%ED%9A%A8%EC%9C%A8%EC%9D%84-%EA%B0%90%EC%88%98%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"디자인 패턴을 엄격하게 따르기 위해서 비효율을 감수해야 하는가 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디자인 패턴을 엄격하게 따르기 위해서 비효율을 감수해야 하는가?</h4>\n<p class=\"my-4 whitespace-pre-wrap\">디자인 패턴을 엄격하게 따르는 것이 효율 적인 경우도 있겠지만 각자 상황에 맞게 디자인 패턴이라는 레퍼런스를 가지고 변형한 제품에 맞는 구조를 고민해 볼 필요가 있다고 생각한다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\"><strong class=\"font-black\">참고 자료</strong></p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item list-container\"><a href=\"https://ko.wikipedia.org/wiki/%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4\" class=\"text-blue-500 hover:underline\">wiki - Design pattern</a></li>\n<li class=\"list-item list-container\"><a href=\"https://tecoble.techcourse.co.kr/post/2021-04-26-presentational-and-container/\" class=\"text-blue-500 hover:underline\">tecoble - presentational and container 패턴이란 무엇인가</a></li>\n<li class=\"list-item list-container\"><a href=\"https://ko.wikipedia.org/wiki/%EC%96%B4%EB%8C%91%ED%84%B0_%ED%8C%A8%ED%84%B4\" class=\"text-blue-500 hover:underline\">wiki - 어댑터 패턴</a></li>\n<li class=\"list-item list-container\"><a href=\"https://medium.com/hcleedev/web-react-flux-%ED%8C%A8%ED%84%B4-88d6caa13b5b\" class=\"text-blue-500 hover:underline\">medium - Web: React Flux 패턴</a></li>\n<li class=\"list-item list-container\"><a href=\"https://junhyunny.github.io/information/design-pattern/mvc-pattern/\" class=\"text-blue-500 hover:underline\">Junhyunny's Devlogs - MVC(Model, View, Controller) Pattern</a></li>\n<li class=\"list-item list-container\"><a href=\"https://brunch.co.kr/@skykamja24/580\" class=\"text-blue-500 hover:underline\">branch - 아토믹(Atomic) 컴포넌트 디자인 개발 패턴</a></li>\n<li class=\"list-item list-container\"><a href=\"https://ui.toast.com/weekly-pick/ko_20200213\" class=\"text-blue-500 hover:underline\">toast ui - 리액트 애플리케이션 구조 - 아토믹 디자인</a></li>\n<li class=\"list-item list-container\"><a href=\"https://fe-developers.kakaoent.com/2022/220505-how-page-part-use-atomic-design-system/\" class=\"text-blue-500 hover:underline\">kakao entertainment fe 기술 블로그 - 아토믹 디자인을 활용한 디자인 시스템 도입기</a></li>\n<li class=\"list-item list-container\"><a href=\"https://beomy.tistory.com/43\" class=\"text-blue-500 hover:underline\">버미노트 - [디자인패턴] MVC, MVP, MVVM 비교</a></li>\n</ul>\n</blockquote>","headings":[{"depth":2,"value":"디자인 패턴이 뭔데?","id":"디자인-패턴이-뭔데"},{"depth":2,"value":"React를 이용한 개발에서 유용한 몇 가지 디자인 패턴","id":"react를-이용한-개발에서-유용한-몇-가지-디자인-패턴"},{"depth":3,"value":"MVC","id":"mvc"},{"depth":3,"value":"MVVM","id":"mvvm"},{"depth":3,"value":"Flux","id":"flux"},{"depth":3,"value":"Presentational and Container Component","id":"presentational-and-container-component"},{"depth":3,"value":"Atomic","id":"atomic"},{"depth":2,"value":"디자인 패턴, 중요한 건 알겠는데...","id":"디자인-패턴-중요한-건-알겠는데"},{"depth":3,"value":"디자인 패턴 중요한 건 알겠는데 왜 써야 하지?","id":"디자인-패턴-중요한-건-알겠는데-왜-써야-하지"},{"depth":3,"value":"우린 그런 거 없어도 잘 개발해 왔다!","id":"우린-그런-거-없어도-잘-개발해-왔다"},{"depth":3,"value":"모든 상황에서 디자인 패턴을 그대로 따르는 것은 정답이 아닐 수 있다.","id":"모든-상황에서-디자인-패턴을-그대로-따르는-것은-정답이-아닐-수-있다"},{"depth":4,"value":"디자인 패턴을 엄격하게 따르기 위해서 비효율을 감수해야 하는가?","id":"디자인-패턴을-엄격하게-따르기-위해서-비효율을-감수해야-하는가"}],"fields":{"slug":"/react-design-pattern/"},"frontmatter":{"title":"React 기반 제품을 개발할 때 고려해 볼 만한 디자인 패턴","date":"22년 10월 29일","description":"React 제품 개발, 유용한 몇 가지 디자인 패턴","tags":["frontend"]}},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/briend/"},"frontmatter":{"date":"23년 10월 06일","title":"Briend 번역 채팅앱 개발","titleImage":"../images/contents/briend/briend.jpg","tags":["project","frontend","backend"],"description":"유지비 0원에 도전, 짠내나는 번역 채팅앱 개발기"}},{"fields":{"slug":"/digital-nomad-in-jeju/"},"frontmatter":{"date":"23년 04월 10일","title":"제주도 디지털 노마드 생활기","titleImage":"../images/contents/digital-nomad-in-jeju/jeju-cafe.jpeg","tags":["etc"],"description":"3주간 제주도에서 디지털 노마드로 살아보기"}},{"fields":{"slug":"/install-private-packages-with-yarn-berry/"},"frontmatter":{"date":"23년 01월 20일","title":"Install private packages with yarn berry","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/b40ef5d8-6697-41ff-83e6-3e79aef7617a","tags":["issues"],"description":"Spawn node-gyp ENOENT 에러 해결"}},{"fields":{"slug":"/digital-nomad-in-chiang-mai/"},"frontmatter":{"date":"23년 01월 14일","title":"치앙마이 디지털 노마드 생활기","titleImage":"../images/contents/digital-nomad-in-chiang-mai/yellow.jpg","tags":["etc"],"description":"한 달 반동안 치앙마이에서 디지털 노마드로 살아보기"}},{"fields":{"slug":"/react-component-concept/"},"frontmatter":{"date":"22년 11월 16일","title":"리액트 컴포넌트, 어떤 컨셉으로 개발할까?","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/fe6c2b69-9e2e-4724-8204-858b30eef7a3","tags":["frontend"],"description":"리렌더링을 최소화한 React 기반 컴포넌트 라이브러리를 개발하면서 고민했던 내용"}},{"fields":{"slug":"/react-atomic/"},"frontmatter":{"date":"22년 10월 30일","title":"Atomic Design Pattern 적용기","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/846dea6f-cb4f-45db-8f38-634e5e5703b3","tags":["frontend"],"description":"React 제품 개발, Atomic Design Pattern 녹여내기"}},{"fields":{"slug":"/react-design-pattern/"},"frontmatter":{"date":"22년 10월 29일","title":"React 기반 제품을 개발할 때 고려해 볼 만한 디자인 패턴","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/93a45880-52dd-4aff-ad4e-9f1e47f5fe4b","tags":["frontend"],"description":"React 제품 개발, 유용한 몇 가지 디자인 패턴"}},{"fields":{"slug":"/spawn-node-gyp-enoent/"},"frontmatter":{"date":"22년 09월 17일","title":"Spawn node-gyp ENOENT","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/b40ef5d8-6697-41ff-83e6-3e79aef7617a","tags":["issues"],"description":"Spawn node-gyp ENOENT 에러 해결"}},{"fields":{"slug":"/components-styling/"},"frontmatter":{"date":"22년 03월 12일","title":"리액트 컴포넌트 스타일링 정리","titleImage":"../images/contents/components-styling/react.png","tags":["frontend"],"description":"리액트 기반 제품을 개발하면서 고민했던 컴포넌트 스타일링 방법에 대한 고민"}},{"fields":{"slug":"/employment-memoirs/"},"frontmatter":{"date":"22년 02월 16일","title":"대학생 개발자 취업 회고 (1)","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/c8375f1e-6bda-4de3-ab2c-55db8719e709","tags":["etc"],"description":"평범한 대학생 개발자가 2022년 상반기 취업하면서 느낀점"}},{"fields":{"slug":"/employment-memoirs2/"},"frontmatter":{"date":"22년 02월 16일","title":"대학생 개발자 취업 회고 (2)","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/c8375f1e-6bda-4de3-ab2c-55db8719e709","tags":["etc"],"description":"평범한 대학생 개발자가 2022년 상반기 취업하면서 느낀점"}},{"fields":{"slug":"/blog-remake-review2/"},"frontmatter":{"date":"21년 12월 01일","title":"Gatsby 블로그를 개발하면서","titleImage":"../images/contents/blog-remake-review2/gatsby.png","tags":["etc","frontend"],"description":"Next.js에서 Gatsby로 블로그를 이전하면서 느낀 점"}},{"fields":{"slug":"/covid-19-api-update/"},"frontmatter":{"date":"21년 11월 30일","title":"COVID-19 API 업데이트","titleImage":"../images/contents/covid-19-api-update/covid-19-api.png","tags":["project","backend"],"description":"단계적 일상회복에 따른 Covid-19 API 업데이트"}},{"fields":{"slug":"/korea-webtoon-api-update/"},"frontmatter":{"date":"21년 11월 17일","title":"Webtoon API 개발","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/99b6a086-1283-4088-81cc-4cb857c3ccdb","tags":["project","backend"],"description":"비공식 한국 웹툰 서비스 통합 API 개발"}},{"fields":{"slug":"/nest-js/"},"frontmatter":{"date":"21년 10월 29일","title":"NestJS 웹서버 구축하기","titleImage":"../images/contents/nest-js/nest.jpg","tags":["backend"],"description":"Typescript를 이용한 NestJS 코드 작성"}},{"fields":{"slug":"/knu-lms-scheduler/"},"frontmatter":{"date":"21년 10월 14일","title":"KNU LMS Scheduler 프로젝트","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/5ce48afd-9e2c-47c0-82ed-f9deac8556f6","tags":["project","data","frontend"],"description":"공주대학교 비대면 강의 시스템 편의성 개선 프로젝트"}},{"fields":{"slug":"/gititle-project/"},"frontmatter":{"date":"21년 09월 14일","title":"Gititle 프로젝트","titleImage":"https://user-images.githubusercontent.com/71566740/135963287-e5c18f62-da16-4dda-98cb-1dd4a7c2b720.png","tags":["project","frontend"],"description":"좋은 커밋 메시지를 작성하기 위한 프로젝트"}},{"fields":{"slug":"/sass-compiler/"},"frontmatter":{"date":"21년 09월 01일","title":"Live Sass Compiler 사용하기","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/f3841a12-33f5-4994-b147-b38b5a3f5e23","tags":["frontend"],"description":"편리한 Sass 사용을 위한 visual studio code 익스텐션"}},{"fields":{"slug":"/nodejs-crawling/"},"frontmatter":{"date":"21년 08월 31일","title":"크롤링을 통한 데이터 수집하기","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/c9cd8b87-f909-475c-80fe-4f63fb05ad2a","tags":["data"],"description":"Node.js 크롤링을 통한 데이터 수집"}},{"fields":{"slug":"/copilot-review/"},"frontmatter":{"date":"21년 08월 26일","title":"Copilot 사용 후기","titleImage":"../images/contents/copilot-review/copilot.png","tags":["etc"],"description":"Github의 코딩 AI, Copilot 한 달 사용 리뷰"}},{"fields":{"slug":"/typescript-express-server/"},"frontmatter":{"date":"21년 08월 12일","title":"Typescript + Express 서버 구축하기","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/85477ff3-413d-4615-9976-ed0c0cbd9fdc","tags":["backend"],"description":"Typescript를 이용한 Express 서버 구축"}},{"fields":{"slug":"/blog-remake-review1/"},"frontmatter":{"date":"21년 08월 02일","title":"Next.js 블로그를 떠나는 이유","titleImage":"../images/contents/blog-remake-review1/nextjs.png","tags":["etc","frontend"],"description":"블로그 이전 준비"}},{"fields":{"slug":"/good-commit-message/"},"frontmatter":{"date":"21년 07월 03일","title":"Git Commit Message Convention","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/0c061905-eb53-4a8c-a277-6519e1ce2a49","tags":["devOps"],"description":"Git Commit Message 작성을 위한 나와의 약속"}}]},"previous":{"fields":{"slug":"/spawn-node-gyp-enoent/"},"frontmatter":{"title":"Spawn node-gyp ENOENT","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/b40ef5d8-6697-41ff-83e6-3e79aef7617a"}},"next":{"fields":{"slug":"/react-atomic/"},"frontmatter":{"title":"Atomic Design Pattern 적용기","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/846dea6f-cb4f-45db-8f38-634e5e5703b3"}}},"pageContext":{"id":"3fb3ac89-bbfc-5db1-af85-ce4fa66aeb56","previousPostId":"2c508fba-dc5f-5ec1-b8cf-dba145d8bd5d","nextPostId":"12fe1641-f22a-54a7-a547-24c61fe59dfd"}},"staticQueryHashes":["2039569036","2964855266","3768041815","3959992161","4278130389"],"slicesMap":{}}